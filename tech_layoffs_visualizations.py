# -*- coding: utf-8 -*-
"""Tech_Layoffs_Visualizations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JqmJESdOvBf9WhCdK0JW_PJLrwKUCuJ4

## A Comprehensive Analysis of Tech Layoffs (2022–2025)

#### Objective
The goal of this project is to analyze the wave of layoffs in the global tech sector from 2022 to 2025. This includes identifying patterns in layoffs over time, industry-level trends, funding-stage vulnerabilities, and regional impacts. The visualizations aim to provide insight into the economic shifts and decision-making processes behind tech downsizing.

#### Scope
The dataset used in this analysis captures thousands of tech layoff events globally. It includes information on company size, stage, location, industry, layoff counts, percentage laid off, and funding. The project focuses on exploring:

- Timeline and geographic trends in layoffs
- Company-level and industry-wide patterns
- Correlation with funding and company growth stage
- Severity of layoffs via percentage laid off
- Shutdowns and critical risk indicators

#### Data Source
The dataset used for this analysis is a curated record of global tech layoffs compiled from public sources such as press releases, news articles, and crowd-sourced platforms.

**Key Columns:**
- `company`: Company name
- `location`: City or region of layoff
- `industry`: Type of industry (e.g., Fintech, AI, Retail)
- `total_laid_off`: Number of employees laid off
- `percentage_laid_off`: Proportion of workforce laid off
- `funds_raised`: Company funding before layoffs (in millions)
- `stage`: Growth stage (e.g., Series A, Post-IPO)
- `country`: Country of operation
- `date`: Layoff event date
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px

df = pd.read_csv('/content/layoffs.csv')

df['date'] = pd.to_datetime(df['date'], errors='coerce')
df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')
df['percentage_laid_off'] = df['percentage_laid_off'].str.replace('%', '')
df['percentage_laid_off'] = pd.to_numeric(df['percentage_laid_off'], errors='coerce')

def parse_funding(value):
    if pd.isna(value):
        return np.nan
    value = value.replace("$", "").replace(",", "").strip()
    try:
        return float(value)
    except ValueError:
        return np.nan

df['funds_raised_m'] = df['funds_raised'].apply(parse_funding)

df_cleaned = df[['company', 'location', 'total_laid_off', 'percentage_laid_off',
                 'industry', 'stage', 'funds_raised_m', 'country', 'date']].copy()
df_plot = df_cleaned.dropna(subset=["date"])

colors = ['skyblue', 'salmon', 'gold', 'orchid', 'mediumseagreen',
          'cornflowerblue', 'plum', 'lightcoral', 'khaki', 'turquoise']

"""### 1. How have total layoffs in the tech industry changed over time?
This line chart shows the 7-day rolling average of total layoffs to identify trends and spikes in layoff activity.

"""

plt.figure(figsize=(12, 6))
df_plot.groupby('date')['total_laid_off'].sum().rolling(7).mean().plot(color='#FF5733')
plt.title('Total Layoffs Over Time (7-Day Rolling Avg)')
plt.ylabel('Total Laid Off')
plt.xlabel('Date')
plt.grid(True)
plt.tight_layout()
plt.show()

"""### 2. Which countries have experienced the most layoffs?
This bar chart displays total layoffs by country, highlighting the top 10 most affected nations.

"""

plt.figure(figsize=(10, 6))
df_plot.groupby('country')['total_laid_off'].sum().sort_values(ascending=True).tail(10).plot(kind='barh', color=colors)
plt.title('Top 10 Countries by Total Layoffs')
plt.xlabel('Total Laid Off')
plt.tight_layout()
plt.show()

"""### 3. What are the most affected industries in terms of total layoffs?
This chart ranks industries by total number of layoffs.

"""

industry_data = df_plot.groupby('industry')['total_laid_off'].sum().sort_values(ascending=False).head(10).reset_index()
fig = px.treemap(
    industry_data,
    path=['industry'],
    values='total_laid_off',
    title='Top 10 Industries by Total Layoffs',
    color='total_laid_off',
)
fig.update_traces(textinfo='label+value')
fig.show()

"""### 4. Which companies have laid off the most employees?
A look at the top 10 companies with the highest total layoffs.

"""

plt.figure(figsize=(12, 6))
df_plot.groupby('company')['total_laid_off'].sum().sort_values(ascending=False).head(10).plot(kind='bar', color=colors)
plt.title('Top 10 Companies by Total Layoffs')
plt.ylabel('Total Laid Off')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### 5. What is the distribution of the percentage of workforce laid off?
A histogram of layoff percentages across all companies to understand how severe layoffs were.

"""

plt.figure(figsize=(10, 6))
sns.histplot(df_plot['percentage_laid_off'].dropna(), bins=20, kde=True, color='tomato')
plt.title('Distribution of Percentage Laid Off')
plt.xlabel('Percentage Laid Off')
plt.tight_layout()
plt.show()

"""### 6. How does company stage relate to layoff severity?
Average percentage laid off across different funding stages (e.g., Series A, Post-IPO).

"""

plt.figure(figsize=(12, 6))
df_plot.groupby('stage')['percentage_laid_off'].mean().sort_values(ascending=False).plot(kind='bar', color=colors)
plt.title('Average Percentage Laid Off by Company Stage')
plt.ylabel('Average % Laid Off')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### 7. What is the monthly trend of layoffs?
Total layoffs grouped by month to reveal patterns.

"""

df_plot['month'] = df_plot['date'].dt.to_period('M').astype(str)
plt.figure(figsize=(14, 6))
df_plot.groupby('month')['total_laid_off'].sum().plot(color='#FF5733')
plt.title('Monthly Total Layoffs Over Time')
plt.xticks(rotation=90)
plt.ylabel('Total Laid Off')
plt.tight_layout()
plt.show()

"""### 8. How do layoff percentages vary by country?
Box plot of percentage laid off across the top 10 countries.

"""

plt.figure(figsize=(14, 6))
top_countries = df_plot['country'].value_counts().head(10).index
sns.boxplot(data=df_plot[df_plot['country'].isin(top_countries)],
            x='country', y='percentage_laid_off', palette='Dark2')
plt.title('Percentage Laid Off by Country (Top 10)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### 9. When were the biggest layoff spikes by year and month?
A heatmap showing layoff totals by calendar month and year.

"""

df_plot['year'] = df_plot['date'].dt.year
df_plot['month_num'] = df_plot['date'].dt.month
pivot = df_plot.pivot_table(index='year', columns='month_num', values='total_laid_off', aggfunc='sum')
plt.figure(figsize=(10, 6))
sns.heatmap(pivot, annot=True, fmt=".0f", cmap='YlOrRd')
plt.title('Heatmap of Layoffs by Year and Month')
plt.xlabel('Month')
plt.ylabel('Year')
plt.tight_layout()
plt.show()

"""### 10. How are layoffs, funding, and layoff percentage related?
A correlation matrix for total laid off, funds raised, and percentage laid off.

"""

plt.figure(figsize=(8, 6))
sns.heatmap(df_plot[['total_laid_off', 'percentage_laid_off', 'funds_raised_m']].corr(), annot=True, cmap='Spectral')
plt.title('Correlation Between Numeric Variables')
plt.tight_layout()
plt.show()

"""### 11. Which companies laid off their entire workforce?
Shows companies with a 100% layoff rate — often indicating shutdown.

"""

plt.figure(figsize=(12, 6))
df_plot[df_plot['percentage_laid_off'] == 100]['company'].value_counts().head(10).plot(kind='bar', color=colors)
plt.title('Top Companies with 100% Layoffs')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### 12. Are companies with more funding laying off more employees?
Total layoffs grouped by funding brackets (e.g., 0–10M, 10–50M).

"""

df_plot['funding_bracket'] = pd.cut(df_plot['funds_raised_m'], bins=[0, 10, 50, 100, 500, 1000, np.inf], labels=['0-10M', '10-50M', '50-100M', '100-500M', '500M-1B', '1B+'])
plt.figure(figsize=(10, 6))
df_plot.groupby('funding_bracket')['total_laid_off'].sum().plot(kind='bar', color=colors)
plt.title('Layoffs by Funding Bracket')
plt.ylabel('Total Laid Off')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### 13. Which cities have seen the most tech layoffs?
Total layoffs by city, showing geographic hotspots.

"""

plt.figure(figsize=(12, 6))
df_plot['city'] = df_plot['location'].str.split(',').str[0]
df_plot.groupby('city')['total_laid_off'].sum().sort_values(ascending=False).head(10).plot(kind='bar', color=colors)
plt.title('Top 10 Cities by Total Layoffs')
plt.ylabel('Total Laid Off')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()